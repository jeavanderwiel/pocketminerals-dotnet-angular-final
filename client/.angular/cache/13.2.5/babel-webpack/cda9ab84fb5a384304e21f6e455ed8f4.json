{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { Pagination } from '../shared/models/pagination';\nimport { map } from 'rxjs/operators';\nimport { ShopParams } from '../shared/models/shopParams';\nimport { of } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ShopService = /*#__PURE__*/(() => {\n  class ShopService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = environment.apiUrl;\n      this.products = [];\n      this.brands = [];\n      this.types = [];\n      this.pagination = new Pagination();\n      this.shopParams = new ShopParams();\n      this.productCache = new Map();\n    }\n\n    getProducts(useCache) {\n      if (useCache === false) {\n        this.productCache = new Map();\n      }\n\n      if (this.productCache.size > 0 && useCache === true) {\n        if (this.productCache.has(Object.values(this.shopParams).join('-'))) {\n          this.pagination.data = this.productCache.get(Object.values(this.shopParams).join('-'));\n          return of(this.pagination);\n        }\n      }\n\n      let params = new HttpParams();\n\n      if (this.shopParams.brandId !== 0) {\n        params = params.append('brandId', this.shopParams.brandId.toString());\n      }\n\n      if (this.shopParams.typeId !== 0) {\n        params = params.append('typeId', this.shopParams.typeId.toString());\n      }\n\n      if (this.shopParams.search) {\n        params = params.append('search', this.shopParams.search);\n      }\n\n      params = params.append('sort', this.shopParams.sort);\n      params = params.append('pageIndex', this.shopParams.pageNumber.toString());\n      params = params.append('pageSize', this.shopParams.pageSize.toString());\n      return this.http.get(this.baseUrl + 'products', {\n        observe: 'response',\n        params\n      }).pipe(map(response => {\n        this.productCache.set(Object.values(this.shopParams).join('-'), response.body.data);\n        this.pagination = response.body;\n        return this.pagination;\n      }));\n    }\n\n    setShopParams(params) {\n      this.shopParams = params;\n    }\n\n    getShopParams() {\n      return this.shopParams;\n    }\n\n    getProduct(id) {\n      let product;\n      this.productCache.forEach(products => {\n        console.log(product);\n        product = products.find(p => p.id === id);\n      });\n\n      if (product) {\n        return of(product);\n      }\n\n      return this.http.get(this.baseUrl + 'products/' + id);\n    }\n\n    getBrands() {\n      if (this.brands.length > 0) {\n        return of(this.brands);\n      }\n\n      return this.http.get(this.baseUrl + 'products/brands').pipe(map(response => {\n        this.brands = response;\n        return response;\n      }));\n    }\n\n    getTypes() {\n      if (this.types.length > 0) {\n        return of(this.types);\n      }\n\n      return this.http.get(this.baseUrl + 'products/types').pipe(map(response => {\n        this.types = response;\n        return response;\n      }));\n    }\n\n  }\n\n  ShopService.ɵfac = function ShopService_Factory(t) {\n    return new (t || ShopService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ShopService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ShopService,\n    factory: ShopService.ɵfac,\n    providedIn: 'root'\n  });\n  return ShopService;\n})();","map":null,"metadata":{},"sourceType":"module"}