{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport { Basket } from '../shared/models/basket';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let BasketService = /*#__PURE__*/(() => {\n  class BasketService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = environment.apiUrl;\n      this.basketSource = new BehaviorSubject(null);\n      this.basket$ = this.basketSource.asObservable();\n      this.basketTotalSource = new BehaviorSubject(null);\n      this.basketTotal$ = this.basketTotalSource.asObservable();\n      this.shipping = 0;\n    }\n\n    createPaymentIntent() {\n      return this.http.post(this.baseUrl + 'payments/' + this.getCurrentBasketValue().id, {}).pipe(map(basket => {\n        this.basketSource.next(basket);\n        console.log(this.getCurrentBasketValue());\n      }));\n    }\n\n    setShippingPrice(deliveryMethod) {\n      this.shipping = deliveryMethod.price;\n      const basket = this.getCurrentBasketValue();\n      basket.deliveryMethodId = deliveryMethod.id;\n      basket.shippingPrice = deliveryMethod.price;\n      this.calculateTotals();\n      this.setBasket(basket);\n    }\n\n    getBasket(id) {\n      return this.http.get(this.baseUrl + 'basket?id=' + id).pipe(map(basket => {\n        this.basketSource.next(basket);\n        this.shipping = basket.shippingPrice;\n        this.calculateTotals();\n      }));\n    }\n\n    setBasket(basket) {\n      return this.http.post(this.baseUrl + 'basket', basket).subscribe(response => {\n        this.basketSource.next(response);\n        this.calculateTotals();\n      }, error => {\n        console.log(error);\n      });\n    }\n\n    getCurrentBasketValue() {\n      return this.basketSource.value;\n    }\n\n    addItemToBasket(item, quantity = 1) {\n      var _a;\n\n      const itemToAdd = this.mapProductItemToBasketItem(item, quantity);\n      const basket = (_a = this.getCurrentBasketValue()) !== null && _a !== void 0 ? _a : this.createBasket();\n      basket.items = this.addOrUpdateItem(basket.items, itemToAdd, quantity);\n      this.setBasket(basket);\n    }\n\n    incrementItemQuantity(item) {\n      const basket = this.getCurrentBasketValue();\n      const foundItemIndex = basket.items.findIndex(x => x.id === item.id);\n      basket.items[foundItemIndex].quantity++;\n      this.setBasket(basket);\n    }\n\n    decrementItemQuantity(item) {\n      const basket = this.getCurrentBasketValue();\n      const foundItemIndex = basket.items.findIndex(x => x.id === item.id);\n\n      if (basket.items[foundItemIndex].quantity > 1) {\n        basket.items[foundItemIndex].quantity--;\n        this.setBasket(basket);\n      } else {\n        this.removeItemFromBasket(item);\n      }\n    }\n\n    removeItemFromBasket(item) {\n      const basket = this.getCurrentBasketValue();\n\n      if (basket.items.some(x => x.id === item.id)) {\n        basket.items = basket.items.filter(i => i.id !== item.id);\n\n        if (basket.items.length > 0) {\n          this.setBasket(basket);\n        } else {\n          this.deleteBasket(basket);\n        }\n      }\n    }\n\n    deleteLocalBasket(id) {\n      this.basketSource.next(null);\n      this.basketTotalSource.next(null);\n      localStorage.removeItem('basket_id');\n    }\n\n    deleteBasket(basket) {\n      return this.http.delete(this.baseUrl + 'basket?id=' + basket.id).subscribe(() => {\n        this.basketSource.next(null);\n        this.basketTotalSource.next(null);\n        localStorage.removeItem('basket_id');\n      }, error => {\n        console.log(error);\n      });\n    }\n\n    calculateTotals() {\n      const basket = this.getCurrentBasketValue();\n      const shipping = this.shipping;\n      const subtotal = basket.items.reduce((a, b) => b.price * b.quantity + a, 0);\n      const total = subtotal + shipping;\n      this.basketTotalSource.next({\n        shipping,\n        total,\n        subtotal\n      });\n    }\n\n    addOrUpdateItem(items, itemToAdd, quantity) {\n      const index = items.findIndex(i => i.id === itemToAdd.id);\n\n      if (index === -1) {\n        itemToAdd.quantity = quantity;\n        items.push(itemToAdd);\n      } else {\n        items[index].quantity += quantity;\n      }\n\n      return items;\n    }\n\n    createBasket() {\n      const basket = new Basket();\n      localStorage.setItem('basket_id', basket.id);\n      return basket;\n    }\n\n    mapProductItemToBasketItem(item, quantity) {\n      return {\n        id: item.id,\n        productName: item.name,\n        price: item.price,\n        pictureUrl: item.pictureUrl,\n        quantity,\n        brand: item.productBrand,\n        type: item.productType\n      };\n    }\n\n  }\n\n  BasketService.ɵfac = function BasketService_Factory(t) {\n    return new (t || BasketService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  BasketService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BasketService,\n    factory: BasketService.ɵfac,\n    providedIn: 'root'\n  });\n  return BasketService;\n})();","map":null,"metadata":{},"sourceType":"module"}