{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of, ReplaySubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let AccountService = /*#__PURE__*/(() => {\n  class AccountService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.baseUrl = environment.apiUrl;\n      this.currentUserSource = new ReplaySubject(1);\n      this.currentUser$ = this.currentUserSource.asObservable();\n      this.isAdminSource = new ReplaySubject(1);\n      this.isAdmin$ = this.isAdminSource.asObservable();\n    }\n\n    isAdmin(token) {\n      if (token) {\n        const decodedToken = JSON.parse(atob(token.split('.')[1]));\n\n        if (decodedToken.role.indexOf('Admin') > -1) {\n          return true;\n        }\n      }\n    }\n\n    loadCurrentUser(token) {\n      if (token === null) {\n        this.currentUserSource.next(null);\n        return of(null);\n      }\n\n      let headers = new HttpHeaders();\n      headers = headers.set('Authorization', `Bearer ${token}`);\n      return this.http.get(this.baseUrl + 'account', {\n        headers\n      }).pipe(map(user => {\n        if (user) {\n          localStorage.setItem('token', user.token);\n          this.currentUserSource.next(user);\n          this.isAdminSource.next(this.isAdmin(user.token));\n        }\n      }));\n    }\n\n    login(values) {\n      return this.http.post(this.baseUrl + 'account/login', values).pipe(map(user => {\n        if (user) {\n          localStorage.setItem('token', user.token);\n          this.currentUserSource.next(user);\n          this.isAdminSource.next(this.isAdmin(user.token));\n        }\n      }));\n    }\n\n    register(values) {\n      return this.http.post(this.baseUrl + 'account/register', values).pipe(map(user => {\n        if (user) {\n          localStorage.setItem('token', user.token);\n          this.currentUserSource.next(user);\n        }\n      }));\n    }\n\n    logout() {\n      localStorage.removeItem('token');\n      this.currentUserSource.next(null);\n      this.router.navigateByUrl('/');\n    }\n\n    checkEmailExists(email) {\n      return this.http.get(this.baseUrl + 'account/emailexists?email=' + email);\n    }\n\n    getUserAddress() {\n      return this.http.get(this.baseUrl + 'account/address');\n    }\n\n    updateUserAddress(address) {\n      return this.http.put(this.baseUrl + 'account/address', address);\n    }\n\n  }\n\n  AccountService.ɵfac = function AccountService_Factory(t) {\n    return new (t || AccountService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  AccountService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AccountService,\n    factory: AccountService.ɵfac,\n    providedIn: 'root'\n  });\n  return AccountService;\n})();","map":null,"metadata":{},"sourceType":"module"}